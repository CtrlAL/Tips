# This GitHub Actions workflow automates the build and test process for a Unity project.
# It runs on every push to the main or develop branches, and on pull requests targeting main.
#
# The workflow consists of two jobs:
# 1. Build: Compiles the Unity project for a specified platform.
# 2. Test: Runs Unity EditMode and PlayMode tests.

name: Unity CI/CD

# Define the events that trigger this workflow.
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Declare environment variables at the workflow level.
env:
  # Automatically detect the Unity version from the project's ProjectVersion.txt file.
  UNITY_VERSION: ${{ steps.get-unity-version.outputs.version }}

# Define the jobs in this workflow.
jobs:
  # Job: Build the Unity project into a standalone executable.
  build:
    name: Build Game
    runs-on: windows-latest  # Unity standalone builds are most stable on Windows.

    steps:
      # Step 1: Check out the repository code.
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Detect the Unity version used in the project.
      - name: Get Unity Version
        id: get-unity-version
        uses: actions/alex-kvazos/get-unity-version@v2

      # Step 3: Install the correct version of Unity.
      # Uses the game-ci community action, which is optimized for Unity projects.
      - name: Setup Unity
        uses: game-ci/unity-setup@v5
        with:
          unity-version: ${{ env.UNITY_VERSION }}
          # Provides token for GitHub rate limiting when downloading Unity.
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # Step 4: Perform the build.
      # Outputs a standalone Windows 64-bit executable.
      - name: Build Project
        uses: game-ci/unity-builder@v4
        with:
          targetPlatform: StandaloneWindows64  # Target platform for the build.
          buildName: MyAwesomeGame              # Name of the output build folder.
          versioning: BranchName                # Include branch name in build metadata.

      # Step 5: Upload the built executable as a GitHub artifact.
      # This allows downloading the build from the Actions tab.
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-StandaloneWindows64
          path: build/StandaloneWindows64

  # Job: Run Unity automated tests.
  # This job depends on the build job completing.
  test:
    name: Run Tests
    runs-on: windows-latest
    needs: build  # Ensures this job runs only after the build job.

    steps:
      # Step 1: Check out the repository code.
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Detect Unity version.
      - name: Get Unity Version
        id: get-unity-version
        uses: actions/alex-kvazos/get-unity-version@v2

      # Step 3: Install Unity.
      - name: Setup Unity
        uses: game-ci/unity-setup@v5
        with:
          unity-version: ${{ env.UNITY_VERSION }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # Step 4: Run EditMode tests.
      # These tests run without loading a scene and are faster.
      - name: Test in Edit Mode
        uses: game-ci/unity-test-runner@v4
        with:
          testMode: editmode

      # Step 5: Run PlayMode tests.
      # These tests require a scene and simulate gameplay.
      - name: Test in Play Mode
        uses: game-ci/unity-test-runner@v4
        with:
          testMode: playmode
          # Optional: Specify scenes to load during testing.
          # sceneList: Assets/Scenes/MainScene.unity

      # Step 6: Upload test results, even if tests fail.
      # Ensures logs are available for debugging.
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()  # Always run this step, regardless of test outcome.
        with:
          name: test-results
          path: test-results
